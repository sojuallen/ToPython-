# -*- coding: utf-8 -*-
"""
Created on Tue Oct  9 12:28:31 2018

@author: Allen
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(color_codes = True)
import pandas as pd
pd.set_option('display.max_columns', 500)
%matplotlib inline 

# import the dataset
iris_dat = pd.read_csv('C://Users/Allen/Documents/Allen Training/Python/data/Iris.csv')
iris_d = iris_dat.drop('Id', axis = 1)

# some basic models 
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

# x = iris_d.iloc[:,:-1].values
# y = iris_d.iloc[:,-1].values

x = iris_d.iloc[:,:-1].values
y = iris_d.iloc[:,-1].values

# Spliting the dataset into training and testing set
from sklearn.cross_validation import train_test_split 
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)


########### LogisticRegression
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))

from sklearn.metrics import accuracy_score
print('Accuracy from Logistic Regression is:', accuracy_score(y_test,y_pred))

del(y_pred)
########### Naive bayes
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
# summary
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print('Accuracy from Naive Bayes is :', accuracy_score(y_test, y_pred))

########### Support Vector Machines (SVM)
from sklearn.svm import SVC
clssifier = SVC()
clssifier.fit(x_train, y_train)
y_pred = clssifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test,y_pred))
print("Accuracy from SVM is:", accuracy_score(y_test, y_pred))

########### K-Nearest Neighbours 
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=8)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
# Accuracy score
print('accuracy is',accuracy_score(y_pred,y_test))

############ Decision Trees
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
# Accuracy score
print('accuracy is',accuracy_score(y_pred,y_test))

drop_list = ['Id','SepalLengthCm','SepalWidthCm']
iris_dat.drop(drop_list, axis = 1)
iris_dat.dtypes
